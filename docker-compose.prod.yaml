services:
  db:
    image: postgres:13-alpine
    restart: always
    environment:
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      POSTGRES_DB: "${DB_NAME}"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-net

  backend:
    build:
      context: .
      dockerfile: dockerfile.prod
    image: divertidachat-production:latest
    restart: on-failure
    depends_on:
      db:
        condition: service_healthy
    environment:
      # Application config
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
      JWT_SECRET_KEY: "${JWT_SECRET_KEY}"
      DB_HOST: db
      DB_USER: "${DB_USER}"
      DB_PASSWORD: "${DB_PASSWORD}"
      DB_NAME: "${DB_NAME}"
      DB_PORT: "${DB_PORT}"
    ports:
      - "8080:8080"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - backend-net

networks:
  backend-net:
    driver: bridge

volumes:
  postgres-data:
